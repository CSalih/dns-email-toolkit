var searchIndex = JSON.parse('{\
"det":{"doc":"<code>det</code> is a command line tool for email related DNS records.","t":"DENLLLLLLLLLMLAALLLLLLLLLLFALLLLLLLLLLLLLLAAIKIKKAAAADIDDLLLLLLMMMLLLLLLKKKLLLLLLLLLLLLLLLDDDMMAMDDDLLLLLLMLLLLLLMMLLLLLLLLLLLLLLLADLLLLLLLLLLLLLLAAAAADDDIDDAMKAMMMMAMRRFFFFFDDLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDIDLLLLLLMKLLLLLLLLMMMMLLLLLLLLLLLLMLLLADIDDLLLLLLMMLLLLLLLMMKLMLLLLLLLLLLLLLLLLLLMLLLNDNDDNDNNNNDNDNDENNDNNNNENEENDDMAMAMMMMAMAAMMMMMMMMMMMMMMAMAMMDLLLLLMMLLLLLLDNNELLLLMLLLLLLLMLLLLLLLLLLNDNDNDNDNDNDENDNDLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLMMMLMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLNDENDLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLNNNENLLLLLLLLLLLLNNENDLLLLLLLLLMLLLLLLLLLLDLLLLLLLLLLLMLADLLLLMMLLLLLLMLLLLLLL","n":["Cli","Commands","Spf","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","common","dns","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","spf","try_from","try_from","try_into","try_into","try_octets_into","try_octets_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","cli","presenter","CliCommand","execute","Presenter","error","success","core","domain","infrastructure","dns_resolver","ARecordQuery","DnsResolver","MxRecordQuery","TxtRecordQuery","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","domain_name","domain_name","domain_name","from","from","from","into","into","into","query_a","query_mx","query_txt","try_from","try_from","try_from","try_into","try_into","try_into","try_octets_into","try_octets_into","try_octets_into","type_id","type_id","type_id","vzip","vzip","vzip","ARecord","MxRecord","TxtRecord","exchanges","ip_addresses","record","records","ARecord","MxRecord","TxtRecord","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","exchanges","from","from","from","into","into","into","ip_addresses","records","try_from","try_from","try_from","try_into","try_into","try_into","try_octets_into","try_octets_into","try_octets_into","type_id","type_id","type_id","vzip","vzip","vzip","dns_resolver","DomainDnsResolver","borrow","borrow_mut","default","from","into","new","query_a","query_mx","query_txt","try_from","try_into","try_octets_into","type_id","vzip","core","domain","infrastructure","check","resolver","SpfSummary","SummarySpfQuery","SummarySpfTerminalPresenter","SummarySpfUseCase","SummarySpfUseCaseImpl","SummarySpfWithDetailTerminalPresenter","checks","domain_name","execute","presenter","raw_rdata","record","spf_resolver","terms","use_case","version","MAX_LOOKUP_COUNT","MAX_TXT_LENGTH","check_is_ascii","check_lookup_count","check_max_txt_length","check_version","count_lookup","SummarySpfTerminalPresenter","SummarySpfWithDetailTerminalPresenter","borrow","borrow","borrow_mut","borrow_mut","default","default","error","error","from","from","into","into","new","new","print_spf_error","recursive_print","success","success","try_from","try_from","try_into","try_into","try_octets_into","try_octets_into","type_id","type_id","vzip","vzip","SpfSummary","SummarySpfQuery","SummarySpfUseCase","SummarySpfUseCaseImpl","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","domain_name","execute","execute","from","from","from","into","into","into","new","raw_rdata","record","spf_resolver","terms","try_from","try_from","try_from","try_into","try_into","try_into","try_octets_into","try_octets_into","try_octets_into","type_id","type_id","type_id","version","vzip","vzip","vzip","use_case","ResolveSpfQuery","ResolveSpfUseCase","ResolveSpfUseCaseImpl","SpfAnswer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dns_resolver","domain_name","from","from","from","into","into","into","new","raw_rdata","record","resolve","resolve","terms","to_a_term_mut","to_all","to_include_term_mut","to_ipv4_term","to_ipv6_term","to_mx_term_mut","try_from","try_from","try_from","try_into","try_into","try_into","try_octets_into","try_octets_into","try_octets_into","type_id","type_id","type_id","version","vzip","vzip","vzip","A","AMechanism","All","AllMechanism","CheckError","CheckFailed","Directive","Directive","Exists","Fail","Include","IncludeMechanism","Ip4","Ip4Mechanism","Ip6","Ip6Mechanism","Mechanism","Modifier","Mx","MxMechanism","Neutral","NoSpfRecordFound","Pass","Ptr","QualifierType","SoftFail","SpfError","Term","Unknown","UnknownTerm","Version","description","directive","domain_spec","error","hosts","ip_address","ip_address","ip_addresses","mechanism","mechanism","modifier","qualifier","qualifier","raw_rdata","raw_rdata","raw_value","raw_value","raw_value","raw_value","raw_value","raw_value","subnet_mask","subnet_mask","subnet_mask","subnet_mask","summary","term","terms","version","version","version","Directive","borrow","borrow_mut","fmt","from","into","mechanism","qualifier","to_string","try_from","try_into","try_octets_into","type_id","vzip","CheckError","CheckFailed","NoSpfRecordFound","SpfError","borrow","borrow","borrow_mut","borrow_mut","description","fmt","fmt","from","from","from","into","into","summary","try_from","try_from","try_into","try_into","try_octets_into","try_octets_into","type_id","type_id","vzip","vzip","A","AMechanism","All","AllMechanism","Exists","ExistsMechanism","Include","IncludeMechanism","Ip4","Ip4Mechanism","Ip6","Ip6Mechanism","Mechanism","Mx","MxMechanism","Ptr","PtrMechanism","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","domain_spec","fmt","from","from","from","from","from","from","from","from","from","from_str","hosts","into","into","into","into","into","into","into","into","into","ip_address","ip_address","ip_addresses","need_lookup","raw_rdata","raw_value","raw_value","raw_value","raw_value","raw_value","raw_value","raw_value","raw_value","subnet_mask","subnet_mask","subnet_mask","subnet_mask","terms","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_octets_into","try_octets_into","try_octets_into","try_octets_into","try_octets_into","try_octets_into","try_octets_into","try_octets_into","try_octets_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Exp","ExpModifier","Modifier","Redirect","RedirectModifier","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","domain_spec","from","from","from","into","into","into","need_lookup","raw_value","try_from","try_from","try_from","try_into","try_into","try_into","try_octets_into","try_octets_into","try_octets_into","type_id","type_id","type_id","vzip","vzip","vzip","Fail","Neutral","Pass","QualifierType","SoftFail","as_str","borrow","borrow_mut","default","from","from_str","into","try_from","try_into","try_octets_into","type_id","vzip","Directive","Modifier","Term","Unknown","UnknownTerm","borrow","borrow","borrow_mut","borrow_mut","from","from","from_str","into","into","raw_rdata","try_from","try_from","try_into","try_into","try_octets_into","try_octets_into","type_id","type_id","vzip","vzip","Version","borrow","borrow_mut","fmt","from","from_str","into","to_string","try_from","try_into","try_octets_into","type_id","version","vzip","cli","Spf","augment_args","augment_args_for_update","borrow","borrow_mut","detail","domain","execute","from","from_arg_matches","from_arg_matches_mut","group_id","into","record","try_from","try_into","try_octets_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"det"],[42,"det::common"],[44,"det::common::cli"],[46,"det::common::presenter"],[49,"det::dns"],[52,"det::dns::core"],[53,"det::dns::core::dns_resolver"],[90,"det::dns::domain"],[97,"det::dns::domain::record"],[130,"det::dns::infrastructure"],[131,"det::dns::infrastructure::dns_resolver"],[146,"det::spf"],[149,"det::spf::core"],[151,"det::spf::core::check"],[167,"det::spf::core::check::checks"],[174,"det::spf::core::check::presenter"],[204,"det::spf::core::check::use_case"],[244,"det::spf::core::resolver"],[245,"det::spf::core::resolver::use_case"],[291,"det::spf::domain"],[353,"det::spf::domain::directive"],[367,"det::spf::domain::error"],[394,"det::spf::domain::mechanism"],[516,"det::spf::domain::modifier"],[551,"det::spf::domain::qualifier"],[568,"det::spf::domain::term"],[593,"det::spf::domain::version"],[607,"det::spf::infrastructure"],[608,"det::spf::infrastructure::cli"]],"d":["","","Sender Policy Framework (SPF) utility","","","","","","","","","","","","Common module","DNS module","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","SPF module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Query the TXT record of a domain name.","Query the MX record of a domain name.","Query the TXT record of a domain name.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Summary the SPF record of a domain name.","","RDATA of a single DNS TXT resource record","","","The list of directives or modifiers","","The version of the SPF record (e.g. “spf1”)","","","The character content of the record must be encoded as …","","Records that are too long to fit in a single UDP packet …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Summary the SPF record of a domain name.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","RDATA of a single DNS TXT resource record","","","The list of directives or modifiers","","","","","","","","","","","","","The version of the SPF record (e.g. “spf1”)","","","","","","","","","","","","","","","","The domain name to query","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","RDATA of a single DNS TXT resource record","The SPF record to parse. If not provided, the record will …","","","The list of directives or modifiers","","","","","","","","","","","","","","","","","","","The version of the SPF record (e.g. “spf1”)","","","","","","","","","","","","","The qualifier “-” means fail.","","","","","","","","","","","The qualifier “?” means neutral.","","The qualifier “+” means pass.","","","The qualifier “~” means soft fail.","","","","","","","","The domain name of the included SPF record","","","IPv4 address","IPv6 address","","","The “value” of the directive (e.g. “example.com” …","","","The qualifier of the directive","RDATA of a single DNS TXT resource record","","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","Subnet mask","Subnet mask","Subnet mask","Subnet mask","","","The list of directives or modifiers","","The version of the SPF record (e.g. “spf1”)","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The “value” of the directive (e.g. “example.com” …","The qualifier of the directive","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The domain name of the included SPF record","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","IPv4 address","IPv6 address","","","RDATA of a single DNS TXT resource record","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","The raw value of the mechanism","Subnet mask","Subnet mask","Subnet mask","Subnet mask","The list of directives or modifiers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The version of the SPF record (e.g. “spf1”)","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","The qualifier “-” means fail.","The qualifier “?” means neutral.","The qualifier “+” means pass.","","The qualifier “~” means soft fail.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Output with details","Domain name to check","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Use record value instead of querying it from DNS (useful …","","","","","","",""],"i":[0,0,6,3,3,6,6,3,6,3,6,3,3,3,0,0,3,6,3,6,3,6,3,6,3,6,0,0,3,6,3,6,3,6,3,6,3,6,3,6,3,6,0,0,0,44,0,22,22,0,0,0,0,0,0,0,0,14,18,16,14,18,16,14,18,16,14,18,16,14,18,16,30,30,30,14,18,16,14,18,16,14,18,16,14,18,16,14,18,16,0,0,0,17,15,0,19,0,0,0,15,19,17,15,19,17,17,15,19,17,15,19,17,15,19,15,19,17,15,19,17,15,19,17,15,19,17,15,19,17,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,0,0,0,21,45,0,28,21,29,28,0,28,0,0,0,0,0,0,0,0,0,25,26,25,26,25,26,25,26,25,26,25,26,25,26,0,26,25,26,25,26,25,26,25,26,25,26,25,26,0,0,0,0,28,21,29,28,21,29,21,45,29,28,21,29,28,21,29,29,28,21,29,28,28,21,29,28,21,29,28,21,29,28,21,29,28,28,21,29,0,0,0,0,0,32,33,31,32,33,31,31,32,32,33,31,32,33,31,31,33,32,46,31,33,31,31,31,31,31,31,32,33,31,32,33,31,32,33,31,32,33,31,33,32,33,31,40,0,40,0,0,27,0,35,40,34,40,0,40,0,40,0,0,35,40,0,34,27,34,40,0,34,0,0,35,0,0,23,0,47,0,48,49,50,51,0,36,0,0,36,47,52,53,51,47,48,49,50,51,48,49,50,23,0,47,0,47,42,0,36,36,36,36,36,36,36,36,36,36,36,36,36,0,27,27,0,27,23,27,23,23,27,23,27,27,23,27,23,23,27,23,27,23,27,23,27,23,27,23,40,0,40,0,40,0,40,0,40,0,40,0,0,40,0,40,0,40,53,51,47,48,54,49,50,55,40,53,51,47,48,54,49,50,55,47,40,40,53,51,47,48,54,49,50,55,40,48,40,53,51,47,48,54,49,50,55,49,50,51,40,47,53,51,47,48,54,49,50,55,51,48,49,50,47,40,40,53,51,47,48,54,49,50,55,40,53,51,47,48,54,49,50,55,40,53,51,47,48,54,49,50,55,40,53,51,47,48,54,49,50,55,47,40,53,51,47,48,54,49,50,55,41,0,0,41,0,41,56,57,41,56,57,57,41,56,57,41,56,57,41,56,41,56,57,41,56,57,41,56,57,41,56,57,41,56,57,34,34,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,0,35,0,35,52,35,52,35,52,35,35,52,52,35,52,35,52,35,52,35,52,35,52,0,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43],"f":[0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],0,[[],1],0,0,[[]],[[]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[[],[[8,[7]]]],[9,10],[[]],[[]],[[],[[5,[[12,[11]]]]]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[3,2],[[5,[4]]]],[[6,2],[[5,[4]]]],[[3,2],[[5,[4]]]],[[6,2],[[5,[4]]]],[[]],[[]],0,0,0,[[],[[5,[[12,[11]]]]]],0,[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,[[5,[15,[12,[11]]]]]],[16,[[5,[17,[12,[11]]]]]],[18,[[5,[19,[12,[11]]]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,[[]],[[]],[[],20],[[]],[[]],[[],20],[[20,14],[[5,[15,[12,[11]]]]]],[[20,16],[[5,[17,[12,[11]]]]]],[[20,18],[[5,[19,[12,[11]]]]]],[[],5],[[],5],[[],5],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,[12,[22]]]],0,0,0,0,0,0,0,0,0,[9,[[5,[23]]]],[9,[[5,[24,23]]]],[9,[[5,[23]]]],[9,[[5,[23]]]],[[],24],0,0,[[]],[[]],[[]],[[]],[[],25],[[],26],[[25,27]],[[26,27]],[[]],[[]],[[]],[[]],[[],25],[[],26],[27],[9],[[25,28]],[[26,28]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[21,[12,[22]]]],[[29,21,[12,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[30,29],0,0,0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[30,31],0,0,[32,[[5,[33,27]]]],[[31,32],[[5,[33,27]]]],0,[[31,[8,[34]],9,9],35],[[31,[8,[34]],9],35],[[31,[8,[34]],9],35],[[31,[8,[34]],9],35],[[31,[8,[34]],9],35],[[31,[8,[34]],9,9],35],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[36,37],38],[[]],[[]],0,0,[[],39],[[],5],[[],5],[[],5],[[],13],[[]],0,0,0,0,[[]],[[]],[[]],[[]],0,[[27,37],38],[[23,37],38],[23,27],[[]],[[]],[[]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[40,37],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,[[5,[40]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[40,10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],39],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[41,10],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[],13],[[]],[[]],[[]],0,0,0,0,0,[34,9],[[]],[[]],[[],34],[[]],[9,[[5,[34]]]],[[]],[[],5],[[],5],[[],5],[[],13],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[9,[[5,[35]]]],[[]],[[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],13],[[],13],[[]],[[]],0,[[]],[[]],[[42,37],38],[[]],[9,[[5,[42]]]],[[]],[[],39],[[],5],[[],5],[[],5],[[],13],0,[[]],0,0,[1,1],[1,1],[[]],[[]],0,0,[43,[[5,[[12,[11]]]]]],[[]],[2,[[5,[43,4]]]],[2,[[5,[43,4]]]],[[],[[8,[7]]]],[[]],0,[[],5],[[],5],[[],5],[[],13],[[43,2],[[5,[4]]]],[[43,2],[[5,[4]]]],[[]]],"c":[],"p":[[3,"Command"],[3,"ArgMatches"],[3,"Cli"],[6,"Error"],[4,"Result"],[4,"Commands"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[8,"Error"],[3,"Box"],[3,"TypeId"],[3,"ARecordQuery"],[3,"ARecord"],[3,"MxRecordQuery"],[3,"MxRecord"],[3,"TxtRecordQuery"],[3,"TxtRecord"],[3,"DomainDnsResolver"],[3,"SummarySpfQuery"],[8,"Presenter"],[3,"CheckError"],[15,"usize"],[3,"SummarySpfTerminalPresenter"],[3,"SummarySpfWithDetailTerminalPresenter"],[4,"SpfError"],[3,"SpfSummary"],[3,"SummarySpfUseCaseImpl"],[8,"DnsResolver"],[3,"ResolveSpfUseCaseImpl"],[3,"ResolveSpfQuery"],[3,"SpfAnswer"],[4,"QualifierType"],[4,"Term"],[3,"Directive"],[3,"Formatter"],[6,"Result"],[3,"String"],[4,"Mechanism"],[4,"Modifier"],[3,"Version"],[3,"Spf"],[8,"CliCommand"],[8,"SummarySpfUseCase"],[8,"ResolveSpfUseCase"],[3,"IncludeMechanism"],[3,"MxMechanism"],[3,"Ip4Mechanism"],[3,"Ip6Mechanism"],[3,"AMechanism"],[3,"UnknownTerm"],[3,"AllMechanism"],[3,"PtrMechanism"],[3,"ExistsMechanism"],[3,"ExpModifier"],[3,"RedirectModifier"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
